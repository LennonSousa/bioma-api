import { Request, Response } from 'express';
import { getCustomRepository } from 'typeorm';
import * as Yup from 'yup';

import propertyAvaliationView from '../views/propertyAvaliationView';
import { PropertyAvaliationsRepository } from '../repositories/PropertyAvaliationsRepository';

export default {
    async index(request: Request, response: Response) {
        const propertyAvaliationsRepository = getCustomRepository(PropertyAvaliationsRepository);

        const propertyAvaliations = await propertyAvaliationsRepository.find();

        return response.json(propertyAvaliationView.renderMany(propertyAvaliations));
    },

    async show(request: Request, response: Response) {
        const { id } = request.params;

        const propertyAvaliationsRepository = getCustomRepository(PropertyAvaliationsRepository);

        const propertyAvaliation = await propertyAvaliationsRepository.findOneOrFail(id, {
            relations: [
                'docs',
            ]
        });

        return response.json(propertyAvaliationView.render(propertyAvaliation));
    },

    async create(request: Request, response: Response) {
        const {
            owner_name,
            owner_nick,
            owner_phone,
            owner_school,
            owner_references,
            property_name,
            property_area,
            property_value,
            property_location,
            property_city,
            property_state,
            property_router,
            property_distancy,
            property_access,
            property_winter_access,
            property_summer_access,
            property_owner,
            property_topography,
            property_texture,
            cover_mec,
            cover_mec_species,
            cover_mec_weeds,
            cover_toco,
            cover_toco_species,
            cover_toco_weeds,
            cover_grass,
            cover_grass_species,
            cover_agriculture,
            cover_culture,
            cover_productivity,
            fency_smooth,
            fency_barbed,
            salt_through,
            main_house,
            main_house_value,
            secondary_house,
            secondady_house_value,
            corral,
            corral_value,
            energy,
            energy_type,
            energy_kva,
            weir,
            dam,
            well_amaz,
            well_artesian,
            drinking,
            river,
            river_type,
            river_name,
            market_calf,
            market_cow,
            market_ox,
            market_milk,
            notes,
            propety,
        } = request.body;

        const propertyAvaliationsRepository = getCustomRepository(PropertyAvaliationsRepository);

        const data = {
            owner_name,
            owner_nick,
            owner_phone,
            owner_school,
            owner_references,
            property_name,
            property_area,
            property_value,
            property_location,
            property_city,
            property_state,
            property_router,
            property_distancy,
            property_access,
            property_winter_access,
            property_summer_access,
            property_owner,
            property_topography,
            property_texture,
            cover_mec,
            cover_mec_species,
            cover_mec_weeds,
            cover_toco,
            cover_toco_species,
            cover_toco_weeds,
            cover_grass,
            cover_grass_species,
            cover_agriculture,
            cover_culture,
            cover_productivity,
            fency_smooth,
            fency_barbed,
            salt_through,
            main_house,
            main_house_value,
            secondary_house,
            secondady_house_value,
            corral,
            corral_value,
            energy,
            energy_type,
            energy_kva,
            weir,
            dam,
            well_amaz,
            well_artesian,
            drinking,
            river,
            river_type,
            river_name,
            market_calf,
            market_cow,
            market_ox,
            market_milk,
            notes,
            propety,
        };

        const schema = Yup.object().shape({
            owner_name: Yup.string().required(),
            owner_nick: Yup.string().notRequired(),
            owner_phone: Yup.string().notRequired(),
            owner_school: Yup.string().required(),
            owner_references: Yup.string().notRequired(),
            property_name: Yup.string().required(),
            property_area: Yup.string().required(),
            property_value: Yup.number().required(),
            property_location: Yup.string().required(),
            property_city: Yup.string().required(),
            property_state: Yup.string().required(),
            property_router: Yup.string().required(),
            property_distancy: Yup.string().notRequired(),
            property_access: Yup.string().required(),
            property_winter_access: Yup.string().required(),
            property_summer_access: Yup.string().required(),
            property_owner: Yup.string().required(),
            property_topography: Yup.string().required(),
            property_texture: Yup.string().required(),
            cover_mec: Yup.string().notRequired(),
            cover_mec_species: Yup.string().notRequired(),
            cover_mec_weeds: Yup.string().notRequired(),
            cover_toco: Yup.string().notRequired(),
            cover_toco_species: Yup.string().notRequired(),
            cover_toco_weeds: Yup.string().notRequired(),
            cover_grass: Yup.string().notRequired(),
            cover_grass_species: Yup.string().notRequired(),
            cover_agriculture: Yup.string().required(),
            cover_culture: Yup.string().notRequired(),
            cover_productivity: Yup.string().notRequired(),
            fency_smooth: Yup.string().notRequired(),
            fency_barbed: Yup.string().notRequired(),
            salt_through: Yup.string().notRequired(),
            main_house: Yup.string().notRequired(),
            main_house_value: Yup.number().notRequired(),
            secondary_house: Yup.string().notRequired(),
            secondady_house_value: Yup.number().notRequired(),
            corral: Yup.string().notRequired(),
            corral_value: Yup.number().notRequired(),
            energy: Yup.boolean().notRequired(),
            energy_type: Yup.string().notRequired(),
            energy_kva: Yup.string().notRequired(),
            weir: Yup.string().notRequired(),
            dam: Yup.string().notRequired(),
            well_amaz: Yup.string().notRequired(),
            well_artesian: Yup.string().notRequired(),
            drinking: Yup.string().notRequired(),
            river: Yup.boolean().required(),
            river_type: Yup.string().notRequired(),
            river_name: Yup.string().notRequired(),
            market_calf: Yup.number().required(),
            market_cow: Yup.number().required(),
            market_ox: Yup.number().required(),
            market_milk: Yup.number().required(),
            notes: Yup.string().notRequired(),
            propety: Yup.string().required(),
        });

        await schema.validate(data, {
            abortEarly: false,
        });

        const propertyAvaliation = propertyAvaliationsRepository.create(data);

        await propertyAvaliationsRepository.save(propertyAvaliation);

        return response.status(201).json(propertyAvaliationView.render(propertyAvaliation));
    },

    async update(request: Request, response: Response) {
        const { id } = request.params;

        const {
            owner_name,
            owner_nick,
            owner_phone,
            owner_school,
            owner_references,
            property_name,
            property_area,
            property_value,
            property_location,
            property_city,
            property_state,
            property_router,
            property_distancy,
            property_access,
            property_winter_access,
            property_summer_access,
            property_owner,
            property_topography,
            property_texture,
            cover_mec,
            cover_mec_species,
            cover_mec_weeds,
            cover_toco,
            cover_toco_species,
            cover_toco_weeds,
            cover_grass,
            cover_grass_species,
            cover_agriculture,
            cover_culture,
            cover_productivity,
            fency_smooth,
            fency_barbed,
            salt_through,
            main_house,
            main_house_value,
            secondary_house,
            secondady_house_value,
            corral,
            corral_value,
            energy,
            energy_type,
            energy_kva,
            weir,
            dam,
            well_amaz,
            well_artesian,
            drinking,
            river,
            river_type,
            river_name,
            market_calf,
            market_cow,
            market_ox,
            market_milk,
            notes,
        } = request.body;

        const propertyAvaliationsRepository = getCustomRepository(PropertyAvaliationsRepository);

        const data = {
            owner_name,
            owner_nick,
            owner_phone,
            owner_school,
            owner_references,
            property_name,
            property_area,
            property_value,
            property_location,
            property_city,
            property_state,
            property_router,
            property_distancy,
            property_access,
            property_winter_access,
            property_summer_access,
            property_owner,
            property_topography,
            property_texture,
            cover_mec,
            cover_mec_species,
            cover_mec_weeds,
            cover_toco,
            cover_toco_species,
            cover_toco_weeds,
            cover_grass,
            cover_grass_species,
            cover_agriculture,
            cover_culture,
            cover_productivity,
            fency_smooth,
            fency_barbed,
            salt_through,
            main_house,
            main_house_value,
            secondary_house,
            secondady_house_value,
            corral,
            corral_value,
            energy,
            energy_type,
            energy_kva,
            weir,
            dam,
            well_amaz,
            well_artesian,
            drinking,
            river,
            river_type,
            river_name,
            market_calf,
            market_cow,
            market_ox,
            market_milk,
            notes,
        };

        const schema = Yup.object().shape({
            owner_name: Yup.string().required(),
            owner_nick: Yup.string().notRequired(),
            owner_phone: Yup.string().notRequired(),
            owner_school: Yup.string().required(),
            owner_references: Yup.string().notRequired(),
            property_name: Yup.string().required(),
            property_area: Yup.string().required(),
            property_value: Yup.number().required(),
            property_location: Yup.string().required(),
            property_city: Yup.string().required(),
            property_state: Yup.string().required(),
            property_router: Yup.string().required(),
            property_distancy: Yup.string().notRequired(),
            property_access: Yup.string().required(),
            property_winter_access: Yup.string().required(),
            property_summer_access: Yup.string().required(),
            property_owner: Yup.string().required(),
            property_topography: Yup.string().required(),
            property_texture: Yup.string().required(),
            cover_mec: Yup.string().notRequired(),
            cover_mec_species: Yup.string().notRequired(),
            cover_mec_weeds: Yup.string().notRequired(),
            cover_toco: Yup.string().notRequired(),
            cover_toco_species: Yup.string().notRequired(),
            cover_toco_weeds: Yup.string().notRequired(),
            cover_grass: Yup.string().notRequired(),
            cover_grass_species: Yup.string().notRequired(),
            cover_agriculture: Yup.string().required(),
            cover_culture: Yup.string().notRequired(),
            cover_productivity: Yup.string().notRequired(),
            fency_smooth: Yup.string().notRequired(),
            fency_barbed: Yup.string().notRequired(),
            salt_through: Yup.string().notRequired(),
            main_house: Yup.string().notRequired(),
            main_house_value: Yup.number().notRequired(),
            secondary_house: Yup.string().notRequired(),
            secondady_house_value: Yup.number().notRequired(),
            corral: Yup.string().notRequired(),
            corral_value: Yup.number().notRequired(),
            energy: Yup.boolean().notRequired(),
            energy_type: Yup.string().notRequired(),
            energy_kva: Yup.string().notRequired(),
            weir: Yup.string().notRequired(),
            dam: Yup.string().notRequired(),
            well_amaz: Yup.string().notRequired(),
            well_artesian: Yup.string().notRequired(),
            drinking: Yup.string().notRequired(),
            river: Yup.boolean().required(),
            river_type: Yup.string().notRequired(),
            river_name: Yup.string().notRequired(),
            market_calf: Yup.number().required(),
            market_cow: Yup.number().required(),
            market_ox: Yup.number().required(),
            market_milk: Yup.number().required(),
            notes: Yup.string().notRequired(),
        });

        await schema.validate(data, {
            abortEarly: false,
        });

        const propertyAvaliation = propertyAvaliationsRepository.create(data);

        await propertyAvaliationsRepository.update(id, propertyAvaliation);

        return response.status(204).json();
    },

    async delete(request: Request, response: Response) {
        const { id } = request.params;

        const propertyAvaliationsRepository = getCustomRepository(PropertyAvaliationsRepository);

        await propertyAvaliationsRepository.delete(id);

        return response.status(204).send();
    }
}